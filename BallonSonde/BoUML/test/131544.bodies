class TwoWire
!!!140120.cpp!!!	~TwoWire()
    flush();
    if(i2c) {
        i2cRelease(i2c);
        i2c=NULL;
    }
!!!140248.cpp!!!	begin(in sdaPin : int = -1, in sclPin : int = -1, in frequency : uint32_t = 0) : bool
    if(sdaPin < 0) { // default param passed
        if(num == 0) {
            if(sda==-1) {
                sdaPin = SDA;    //use Default Pin
            } else {
                sdaPin = sda;    // reuse prior pin
            }
        } else {
            if(sda==-1) {
                log_e("no Default SDA Pin for Second Peripheral");
                return false; //no Default pin for Second Peripheral
            } else {
                sdaPin = sda;    // reuse prior pin
            }
        }
    }

    if(sclPin < 0) { // default param passed
        if(num == 0) {
            if(scl == -1) {
                sclPin = SCL;    // use Default pin
            } else {
                sclPin = scl;    // reuse prior pin
            }
        } else {
            if(scl == -1) {
                log_e("no Default SCL Pin for Second Peripheral");
                return false; //no Default pin for Second Peripheral
            } else {
                sclPin = scl;    // reuse prior pin
            }
        }
    }

    sda = sdaPin;
    scl = sclPin;
    i2c = i2cInit(num, sdaPin, sclPin, frequency);
    if(!i2c) {
        return false;
    }

    flush();
    return true;

!!!140376.cpp!!!	setClock(in frequency : uint32_t) : void
    i2cSetFrequency(i2c, frequency);
!!!140504.cpp!!!	getClock() : size_t
    return i2cGetFrequency(i2c);
!!!140632.cpp!!!	setTimeOut(in timeOutMillis : uint16_t) : void
    _timeOutMillis = timeOutMillis;
!!!140760.cpp!!!	getTimeOut() : uint16_t
    return _timeOutMillis;
!!!140888.cpp!!!	lastError() : uint8_t
    return (uint8_t)last_error;
!!!141016.cpp!!!	getErrorText(in err : uint8_t) : char
    uint8_t t = 0;
    bool found = false;
    char * message = (char*)&ERRORTEXT;

    while(!found && message[0]) {
        found = t == err;
        if(!found) {
            message = message + strlen(message) + 1;
            t++;
        }
    }
    if(!found) {
        return NULL;
    } else {
        return message;
    }
!!!141144.cpp!!!	writeTransmission(in address : uint16_t, inout buff : uint8_t, in size : uint16_t, in sendStop : bool = true) : i2c_err_t
    last_error = i2cWrite(i2c, address, buff, size, sendStop, _timeOutMillis);
    return last_error;
!!!141272.cpp!!!	readTransmission(in address : uint16_t, inout buff : uint8_t, in size : uint16_t, in sendStop : bool = true, inout readCount : uint32_t = NULL) : i2c_err_t
    last_error = i2cRead(i2c, address, buff, size, sendStop, _timeOutMillis, readCount);
    return last_error;
!!!141400.cpp!!!	beginTransmission(in address : uint16_t) : void
    transmitting = 1;
    txAddress = address;
    txIndex = txQueued; // allow multiple beginTransmission(),write(),endTransmission(false) until endTransmission(true)
    txLength = txQueued;
    last_error = I2C_ERROR_OK;
!!!141528.cpp!!!	beginTransmission(in address : uint8_t) : void
    beginTransmission(static_cast<uint16_t>(address));
!!!141656.cpp!!!	beginTransmission(in address : int) : void
    beginTransmission(static_cast<uint16_t>(address));
!!!141784.cpp!!!	endTransmission(in sendStop : bool) : uint8_t
    if(transmitting == 1) {
            // txlength is howmany bytes in txbuffer have been use
        last_error = writeTransmission(txAddress, &txBuffer[txQueued], txLength - txQueued, sendStop);
        if(last_error == I2C_ERROR_CONTINUE){
            txQueued = txLength;
        } else if( last_error == I2C_ERROR_OK){
          rxIndex = 0;
          rxLength = rxQueued;
          rxQueued = 0;
          txQueued = 0; // the SendStop=true will restart all Queueing
        }
    } else {
        last_error = I2C_ERROR_NO_BEGIN;
        flush();
    }
    txIndex = 0;
    txLength = 0;
    transmitting = 0;
    return (last_error == I2C_ERROR_CONTINUE)?I2C_ERROR_OK:last_error; // Don't return Continue for compatibility.
!!!141912.cpp!!!	endTransmission(in  : void) : uint8_t
    return endTransmission(true);
!!!142040.cpp!!!	requestFrom(in address : uint16_t, in size : uint8_t, in sendStop : bool) : uint8_t
    //use internal Wire rxBuffer, multiple requestFrom()'s may be pending, try to share rxBuffer
    uint32_t cnt = rxQueued; // currently queued reads, next available position in rxBuffer
    if(cnt < (I2C_BUFFER_LENGTH-1) && (size + cnt) <= I2C_BUFFER_LENGTH) { // any room left in rxBuffer
        rxQueued += size;
    } else { // no room to receive more!
        log_e("rxBuff overflow %d", cnt + size);
        cnt = 0;
        last_error = I2C_ERROR_MEMORY;
        flush();
        return cnt;
    }

    last_error = readTransmission(address, &rxBuffer[cnt], size, sendStop, &cnt);
    rxIndex = 0;
  
    rxLength = cnt;
  
    if( last_error != I2C_ERROR_CONTINUE){ // not a  buffered ReSTART operation
      // so this operation actually moved data, queuing is done.
        rxQueued = 0;
        txQueued = 0; // the SendStop=true will restart all Queueing or error condition
    }
  
    if(last_error != I2C_ERROR_OK){ // ReSTART on read does not return any data
        cnt = 0;
    }
  
    return cnt;
!!!142168.cpp!!!	requestFrom(in address : uint16_t, in quantity : uint8_t, in sendStop : uint8_t) : uint8_t
    return requestFrom(address, static_cast<size_t>(quantity), static_cast<bool>(sendStop));
!!!142296.cpp!!!	requestFrom(in address : uint16_t, in quantity : uint8_t) : uint8_t
    return requestFrom(address, static_cast<size_t>(quantity), true);
!!!142424.cpp!!!	requestFrom(in address : uint8_t, in quantity : uint8_t, in sendStop : uint8_t) : uint8_t
    return requestFrom(static_cast<uint16_t>(address), static_cast<size_t>(quantity), static_cast<bool>(sendStop));
!!!142552.cpp!!!	requestFrom(in address : uint8_t, in quantity : uint8_t) : uint8_t
    return requestFrom(static_cast<uint16_t>(address), static_cast<size_t>(quantity), true);
!!!142680.cpp!!!	requestFrom(in address : int, in quantity : int, in sendStop : int) : uint8_t
    return static_cast<uint8_t>(requestFrom(static_cast<uint16_t>(address), static_cast<size_t>(quantity), static_cast<bool>(sendStop)));
!!!142808.cpp!!!	requestFrom(in address : int, in quantity : int) : uint8_t
    return requestFrom(static_cast<uint16_t>(address), static_cast<size_t>(quantity), true);
!!!142936.cpp!!!	write(in data : uint8_t) : size_t
    if(transmitting) {
        if(txLength >= I2C_BUFFER_LENGTH) {
            last_error = I2C_ERROR_MEMORY;
            return 0;
        }
        txBuffer[txIndex] = data;
        ++txIndex;
        txLength = txIndex;
        return 1;
    }
    last_error = I2C_ERROR_NO_BEGIN; // no begin, not transmitting
    return 0;
!!!143064.cpp!!!	write(in data : uint8_t, in quantity : size_t) : size_t
    for(size_t i = 0; i < quantity; ++i) {
        if(!write(data[i])) {
            return i;
        }
    }
    return quantity;

!!!143192.cpp!!!	available(in  : void) : int
    int result = rxLength - rxIndex;
    return result;
!!!143320.cpp!!!	read(in  : void) : int
    int value = -1;
    if(rxIndex < rxLength) {
        value = rxBuffer[rxIndex];
        ++rxIndex;
    }
    return value;
!!!143448.cpp!!!	peek(in  : void) : int
    int value = -1;
    if(rxIndex < rxLength) {
        value = rxBuffer[rxIndex];
    }
    return value;
!!!143576.cpp!!!	flush(in  : void) : void
    rxIndex = 0;
    rxLength = 0;
    txIndex = 0;
    txLength = 0;
    rxQueued = 0;
    txQueued = 0;
    i2cFlush(i2c); // cleanup
!!!144600.cpp!!!	setDebugFlags(in setBits : uint32_t, in resetBits : uint32_t) : uint32_t
  return i2cDebug(i2c,setBits,resetBits);
