class RadiationWatch
!!!138200.cpp!!!	RadiationWatch(in signPin : byte = 2, in noisePin : byte = 3)
  previousTime = 0;
  previousHistoryTime = 0;
  _count = 0;
  historyIndex = 0;
  historyLength = 0;
  _radiationCallback = NULL;
  _noiseCallback = NULL;
!!!138328.cpp!!!	setup() : void
  // Enable the ~20kÎ© pull-up resistor for radiation and noise
  // pins.
  // For pullup resistors on Arduino, see https://www.arduino.cc/en/Tutorial/DigitalPins
  pinMode(_signPin, INPUT_PULLUP);
  // The noise signal is low by default (no noise), so we could install a pull-down resistor.
  // However this is not available on Arduino platform, so we goes with a pull-up resistor.
  // As the PocketGeiger board pull down the noise signal to low if working, this is not an issue.
  pinMode(_noisePin, INPUT_PULLUP);
  // Initialize _countHistory[].
  for(int i = 0; i < HISTORY_LENGTH; i++)
    _countHistory[i] = 0;
  _count = 0;
  historyIndex = 0;
  historyLength = 0;
  // Init measurement time.
  previousTime = millis();
  previousHistoryTime = millis();
  // Attach interrupt handlers.
  setupInterrupt();
!!!138456.cpp!!!	loop() : void
  // Process radiation dose if the process period has elapsed.
  unsigned long currentTime = millis();
  if(currentTime - previousTime >= PROCESS_PERIOD) {
    noInterrupts();
    int currentCount = _radiationCount;
    int currentNoiseCount = _noiseCount;
    _radiationCount = 0;
    _noiseCount = 0;
    interrupts();
    if(currentNoiseCount == 0) {
      // Store count log.
      _countHistory[historyIndex] += currentCount;
      // Add number of counts.
      _count += currentCount;
    }
    // Shift an array for counting log for each 6 seconds.
    if(currentTime - previousHistoryTime >= HISTORY_UNIT * 1000) {
      previousHistoryTime += (unsigned long)(HISTORY_UNIT * 1000);
      historyIndex = (historyIndex + 1) % HISTORY_LENGTH;
      if(historyLength < (HISTORY_LENGTH-1)) {
        // Since, we overwrite the oldest value in the history,
        // the effective maximum length is HISTORY_LENGTH-1
        historyLength++;
      }
      _count -= _countHistory[historyIndex];
      _countHistory[historyIndex] = 0;
    }
    // Save time of current process period
    previousTime = currentTime;
    // Enable the callbacks.
    if(_noiseCallback && currentNoiseCount > 0) {
      _noiseCallback();
    }
    if(_radiationCallback && currentCount > 0) {
      _radiationCallback();
    }
  }
!!!138968.cpp!!!	cpm() : double
  // cpm = uSv x alpha
  double min = integrationTime() / 60000.0;
  return (min > 0) ? radiationCount() / min : 0;
!!!139096.cpp!!!	uSvh() : double
  return cpm() / kAlpha;
!!!139224.cpp!!!	uSvhError() : double
  double min = integrationTime() / 60000.0;
  return (min > 0) ? sqrt(radiationCount()) / min / kAlpha : 0;
!!!139352.cpp!!!	registerRadiationCallback(in callback : void (*)(void)) : void
  _radiationCallback = callback;
!!!139480.cpp!!!	registerNoiseCallback(in callback : void (*)(void)) : void
  _noiseCallback = callback;
