class AsyncWebServerResponse
!!!202072.cpp!!!	_responseCodeToString(in code : int) : char
  switch (code) {
    case 100: return "Continue";
    case 101: return "Switching Protocols";
    case 200: return "OK";
    case 201: return "Created";
    case 202: return "Accepted";
    case 203: return "Non-Authoritative Information";
    case 204: return "No Content";
    case 205: return "Reset Content";
    case 206: return "Partial Content";
    case 300: return "Multiple Choices";
    case 301: return "Moved Permanently";
    case 302: return "Found";
    case 303: return "See Other";
    case 304: return "Not Modified";
    case 305: return "Use Proxy";
    case 307: return "Temporary Redirect";
    case 400: return "Bad Request";
    case 401: return "Unauthorized";
    case 402: return "Payment Required";
    case 403: return "Forbidden";
    case 404: return "Not Found";
    case 405: return "Method Not Allowed";
    case 406: return "Not Acceptable";
    case 407: return "Proxy Authentication Required";
    case 408: return "Request Time-out";
    case 409: return "Conflict";
    case 410: return "Gone";
    case 411: return "Length Required";
    case 412: return "Precondition Failed";
    case 413: return "Request Entity Too Large";
    case 414: return "Request-URI Too Large";
    case 415: return "Unsupported Media Type";
    case 416: return "Requested range not satisfiable";
    case 417: return "Expectation Failed";
    case 500: return "Internal Server Error";
    case 501: return "Not Implemented";
    case 502: return "Bad Gateway";
    case 503: return "Service Unavailable";
    case 504: return "Gateway Time-out";
    case 505: return "HTTP Version not supported";
    default:  return "";
  }
!!!202200.cpp!!!	AsyncWebServerResponse()
  for(auto header: DefaultHeaders::Instance()) {
    _headers.add(new AsyncWebHeader(header->name(), header->value()));
  }
!!!202328.cpp!!!	~AsyncWebServerResponse()
  _headers.free();
!!!202456.cpp!!!	setCode(in code : int) : void
  if(_state == RESPONSE_SETUP)
    _code = code;
!!!202584.cpp!!!	setContentLength(in len : size_t) : void
  if(_state == RESPONSE_SETUP)
    _contentLength = len;
!!!202712.cpp!!!	setContentType(in type : String) : void
  if(_state == RESPONSE_SETUP)
    _contentType = type;
!!!202840.cpp!!!	addHeader(in name : String, in value : String) : void
  _headers.add(new AsyncWebHeader(name, value));
!!!202968.cpp!!!	_assembleHead(in version : uint8_t) : String
  if(version){
    addHeader("Accept-Ranges","none");
    if(_chunked)
      addHeader("Transfer-Encoding","chunked");
  }
  String out = String();
  int bufSize = 300;
  char buf[bufSize];

  snprintf(buf, bufSize, "HTTP/1.%d %d %s\r\n", version, _code, _responseCodeToString(_code));
  out.concat(buf);

  if(_sendContentLength) {
    snprintf(buf, bufSize, "Content-Length: %d\r\n", _contentLength);
    out.concat(buf);
  }
  if(_contentType.length()) {
    snprintf(buf, bufSize, "Content-Type: %s\r\n", _contentType.c_str());
    out.concat(buf);
  }

  for(const auto& header: _headers){
    snprintf(buf, bufSize, "%s: %s\r\n", header->name().c_str(), header->value().c_str());
    out.concat(buf);
  }
  _headers.free();

  out.concat("\r\n");
  _headLength = out.length();
  return out;
!!!203096.cpp!!!	_started() : bool
 return _state > RESPONSE_SETUP;
!!!203224.cpp!!!	_finished() : bool
 return _state > RESPONSE_WAIT_ACK;
!!!203352.cpp!!!	_failed() : bool
 return _state == RESPONSE_FAILED;
!!!203480.cpp!!!	_sourceValid() : bool
 return false;
!!!203608.cpp!!!	_respond(inout request : AsyncWebServerRequest) : void
 _state = RESPONSE_END; request->client()->close();
!!!203736.cpp!!!	_ack(inout request : AsyncWebServerRequest, in len : size_t, in time : uint32_t) : size_t
 (void)request; (void)len; (void)time; return 0;
